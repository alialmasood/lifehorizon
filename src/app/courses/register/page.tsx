"use client";

import { useState } from "react";
import { toast } from "react-hot-toast";
import { db } from "../../../lib/firebase";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";

const courses = [
  "ุฏูุฑุฉ ุงููุบุฉ ุงูุงููููุฒูุฉ",
  "ุฏูุฑุฉ c++",
  "ุงูุชุญูููุงุช",
  "ุงูุดุงุก ูุชุตููู ุงูููุงูุน ุงูุฅููุชุฑูููุฉ (front end - Wix)",
  "ุงุณุงุณูุงุช ุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู (LLMs) - ุงูุงุณุชุฎุฏุงู ุงูุดุฎุตู",
  "ุงุณุงุณูุงุช ุงุณุชุนูุงู ุงุฏูุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ุงูุนูู ูุงููุดุงุท ุงูุชุฌุงุฑู",
  "ุงุณุชุนูุงู ุงุฏูุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูุงูุดุงุก ุงูุตูุฑ ูุงูุชุตุงููู ( AI Image generator usage)",
  "ุงุญุชุฑุงู ุงุนูุงูุงุช ููุณุจูู",
  "ุฏูุฑุฉ ุงุฏุงุฑุฉ ุงูุงุนูุงู",
  "ุฏูุฑุฉ plc",
  "ุฏูุฑุฉ ุจุฑูุฌุฉ ุงูุชุทุจููุงุช",
  "project planing",
  "QC",
  "ุงูุณูุงูุฉ ุงูููููุฉ",
  "ุงูุงูู ุงูุณูุจุฑุงูู",
];

const educationLevels = [
  "ุงุจุชุฏุงุฆูุฉ",
  "ูุชูุณุทุฉ",
  "ุฅุนุฏุงุฏูุฉ",
  "ุฏุจููู",
  "ุจูุงููุฑููุณ",
  "ูุงุฌุณุชูุฑ",
  "ุฏูุชูุฑุงู",
];

const timePreferences = ["ุตุจุงุญู", "ูุณุงุฆู", "ููุงููุง"];

const provinces = [
  "ุจุบุฏุงุฏ",
  "ุงูุจุตุฑุฉ",
  "ููููู",
  "ุฃุฑุจูู",
  "ุงููุฌู",
  "ูุฑุจูุงุก",
  "ูุฑููู",
  "ุงูุฃูุจุงุฑ",
  "ุฏูุงูู",
  "ูุงุณุท",
  "ุฐู ูุงุฑ",
  "ููุณุงู",
  "ุงููุซูู",
  "ุตูุงุญ ุงูุฏูู",
  "ุจุงุจู",
  "ุงููุงุฏุณูุฉ",
  "ุฏููู",
  "ุงูุณูููุงููุฉ",
];

const API_URL = 'https://www.lifehorizonit.com';

export default function RegisterPage() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    fullName: "",
    phone: "",
    email: "",
    course: "",
    education: "",
    currentJob: "",
    timePreference: "",
    province: "",
    notes: "",
  });

  const validateForm = () => {
    // ุงูุชุญูู ูู ุฃู ุฌููุน ุงูุญููู ุงููุทููุจุฉ ููููุกุฉ
    if (!formData.fullName || !formData.phone || !formData.email || !formData.course || 
        !formData.education || !formData.currentJob || !formData.timePreference || !formData.province) {
      toast.error("ุฌููุน ุงูุญููู ูุทููุจุฉ ุจุงุณุชุซูุงุก ุงูููุงุญุธุงุช");
      return false;
    }

    // ุงูุชุญูู ูู ุฑูู ุงููุงุชู ุงูุนุฑุงูู
    const phoneRegex = /^07[3-9][0-9]{8}$/;
    if (!phoneRegex.test(formData.phone)) {
      toast.error("ูุฑุฌู ุฅุฏุฎุงู ุฑูู ูุงุชู ุนุฑุงูู ุตุญูุญ");
      return false;
    }

    // ุงูุชุญูู ูู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      toast.error("ูุฑุฌู ุฅุฏุฎุงู ุจุฑูุฏ ุฅููุชุฑููู ุตุญูุญ");
      return false;
    }

    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    try {
      console.log("ุจุฏุก ุนูููุฉ ุญูุธ ุงูุจูุงูุงุช...");
      
      // ุฅูุดุงุก ูุณุชูุฏ ุฌุฏูุฏ ูู ูุฌููุนุฉ person
      const personRef = collection(db, "person");
      
      // ุชุฌููุฒ ุงูุจูุงูุงุช ููุฅุฑุณุงู
      const personData = {
        fullName: formData.fullName.trim(),
        phone: formData.phone.trim(),
        email: formData.email.trim().toLowerCase(),
        course: formData.course,
        education: formData.education,
        currentJob: formData.currentJob.trim(),
        timePreference: formData.timePreference,
        province: formData.province,
        notes: formData.notes.trim(),
        createdAt: serverTimestamp(),
        status: "pending",
        submittedAt: new Date().toISOString()
      };

      console.log("ุงูุจูุงูุงุช ุงูุชู ุณูุชู ุญูุธูุง:", personData);

      try {
        // ุฅูุดุงุก ูุณุชูุฏ ุฌุฏูุฏ ูู Firestore
        const docRef = await addDoc(personRef, personData);
        console.log("ุชู ุญูุธ ุงูุจูุงูุงุช ุจูุฌุงุญ! ูุนุฑู ุงููุณุชูุฏ:", docRef.id);
        
        // ุฅุฑุณุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุนุจุฑ API
        console.log("ูุญุงููุฉ ุฅุฑุณุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู...");
        const emailResponse = await fetch(`${API_URL}/api/send-email.php`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          mode: 'cors',
          body: JSON.stringify({
            fullName: personData.fullName,
            email: personData.email,
            phone: personData.phone,
            course: personData.course
          }),
        });

        const emailResult = await emailResponse.json();
        console.log("ูุชูุฌุฉ ุฅุฑุณุงู ุงูุจุฑูุฏ:", emailResult);

        if (!emailResponse.ok) {
          console.warn('ูุดู ูู ุฅุฑุณุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู:', emailResult);
          toast.error("ุชู ุญูุธ ุงูุชุณุฌูู ูููู ูุดู ุฅุฑุณุงู ุจุฑูุฏ ุงูุชุฃููุฏ");
        } else {
          toast.success("ุชู ุฅุฑุณุงู ุทูุจ ุงูุชุณุฌูู ุจูุฌุงุญ! ุณูุตูู ุจุฑูุฏ ุฅููุชุฑููู ููุชุฃููุฏ.");
        }
        
        // ุฅุนุงุฏุฉ ุชุนููู ุงููููุฐุฌ
        setFormData({
          fullName: "",
          phone: "",
          email: "",
          course: "",
          education: "",
          currentJob: "",
          timePreference: "",
          province: "",
          notes: "",
        });
      } catch (firebaseError: any) {
        console.error("ุฎุทุฃ Firebase:", {
          code: firebaseError.code,
          message: firebaseError.message,
          details: firebaseError
        });
        
        if (firebaseError.code === 'permission-denied') {
          toast.error("ุฎุทุฃ ูู ุงูุตูุงุญูุงุช. ูุฑุฌู ุงูุชุญูู ูู ุฅุนุฏุงุฏุงุช Firebase.");
        } else {
          toast.error("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุญูุธ ุงูุจูุงูุงุช. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.");
        }
      }
    } catch (error) {
      console.error("ุฎุทุฃ ุนุงู:", error);
      toast.error("ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleReset = () => {
    setFormData({
      fullName: "",
      phone: "",
      email: "",
      course: "",
      education: "",
      currentJob: "",
      timePreference: "",
      province: "",
      notes: "",
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-xl mx-auto">
        {/* ุฑุฃุณ ุงูุตูุญุฉ */}
        <div className="text-center mb-8">
          <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-3">
            ุงูุชุณุฌูู ูู ุงูุฏูุฑุงุช ุงูุชุฏุฑูุจูุฉ
          </h1>
          <p className="text-gray-600 text-sm sm:text-base">
            ูุฑุฌู ููุก ุงููููุฐุฌ ุงูุชุงูู ููุชุณุฌูู ูู ุฅุญุฏู ุฏูุฑุงุชูุง ุงูุชุฏุฑูุจูุฉ
          </p>
        </div>

        {/* ุงููููุฐุฌ */}
        <form onSubmit={handleSubmit} className="space-y-6 bg-white rounded-2xl shadow-lg p-6 sm:p-8">
          {/* ุงูุงุณู ุงููุงูู */}
          <div className="space-y-2">
            <label htmlFor="fullName" className="block text-sm font-medium text-gray-700">
              ุงูุงุณู ุงููุงูู <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="fullName"
              required
              className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 text-base text-gray-900"
              placeholder="ุฃุฏุฎู ุงุณูู ุงููุงูู"
              value={formData.fullName}
              onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}
            />
          </div>

          {/* ุฑูู ุงููุงุชู */}
          <div className="space-y-2">
            <label htmlFor="phone" className="block text-sm font-medium text-gray-700">
              ุฑูู ุงููุงุชู <span className="text-red-500">*</span>
            </label>
            <div className="relative">
              <input
                type="tel"
                id="phone"
                required
                dir="ltr"
                className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 text-base text-gray-900"
                placeholder="07xxxxxxxxx"
                value={formData.phone}
                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
              />
              <div className="absolute inset-y-0 left-3 flex items-center text-gray-500">
                <span className="text-sm">๐ฎ๐ถ</span>
              </div>
            </div>
          </div>

          {/* ุงูุจุฑูุฏ ุงูุฅููุชุฑููู */}
          <div className="space-y-2">
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">
              ุงูุจุฑูุฏ ุงูุฅููุชุฑููู <span className="text-red-500">*</span>
            </label>
            <input
              type="email"
              id="email"
              required
              dir="ltr"
              className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 text-base text-gray-900"
              placeholder="example@domain.com"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
            />
          </div>

          {/* ุงูุชุญุตูู ุงูุฏุฑุงุณู */}
          <div className="space-y-2">
            <label htmlFor="education" className="block text-sm font-medium text-gray-700">
              ุงูุชุญุตูู ุงูุฏุฑุงุณู <span className="text-red-500">*</span>
            </label>
            <select
              id="education"
              required
              className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 text-base bg-white text-gray-900"
              value={formData.education}
              onChange={(e) => setFormData({ ...formData, education: e.target.value })}
            >
              <option value="">ุงุฎุชุฑ ุงูุชุญุตูู ุงูุฏุฑุงุณู</option>
              {educationLevels.map((level) => (
                <option key={level} value={level}>
                  {level}
                </option>
              ))}
            </select>
          </div>

          {/* ุงูุนูู ุงูุญุงูู */}
          <div className="space-y-2">
            <label htmlFor="currentJob" className="block text-sm font-medium text-gray-700">
              ุงูุนูู ุงูุญุงูู <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="currentJob"
              required
              className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 text-base text-gray-900"
              placeholder="ุฃุฏุฎู ุนููู ุงูุญุงูู"
              value={formData.currentJob}
              onChange={(e) => setFormData({ ...formData, currentJob: e.target.value })}
            />
          </div>

          {/* ุงูุฏูุฑุฉ */}
          <div className="space-y-2">
            <label htmlFor="course" className="block text-sm font-medium text-gray-700">
              ุงุฎุชุฑ ุงูุฏูุฑุฉ <span className="text-red-500">*</span>
            </label>
            <select
              id="course"
              required
              className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 text-base bg-white text-gray-900"
              value={formData.course}
              onChange={(e) => setFormData({ ...formData, course: e.target.value })}
            >
              <option value="">ุงุฎุชุฑ ุฏูุฑุฉ</option>
              {courses.map((course) => (
                <option key={course} value={course}>
                  {course}
                </option>
              ))}
            </select>
          </div>

          {/* ุงููุญุงูุธุฉ */}
          <div className="space-y-2">
            <label htmlFor="province" className="block text-sm font-medium text-gray-700">
              ุงููุญุงูุธุฉ <span className="text-red-500">*</span>
            </label>
            <select
              id="province"
              required
              className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 text-base bg-white text-gray-900"
              value={formData.province}
              onChange={(e) => setFormData({ ...formData, province: e.target.value })}
            >
              <option value="">ุงุฎุชุฑ ุงููุญุงูุธุฉ</option>
              {provinces.map((province) => (
                <option key={province} value={province}>
                  {province}
                </option>
              ))}
            </select>
          </div>

          {/* ุงูููุช ุงูููุถู */}
          <div className="space-y-2">
            <label htmlFor="timePreference" className="block text-sm font-medium text-gray-700">
              ุงูููุช ุงูููุถู ููุฏูุฑุฉ <span className="text-red-500">*</span>
            </label>
            <div className="grid grid-cols-3 gap-3">
              {timePreferences.map((time) => (
                <label
                  key={time}
                  className={`flex items-center justify-center px-4 py-3 border rounded-xl cursor-pointer transition duration-200 ${
                    formData.timePreference === time
                      ? 'bg-blue-50 border-blue-500 text-blue-700'
                      : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <input
                    type="radio"
                    name="timePreference"
                    value={time}
                    checked={formData.timePreference === time}
                    onChange={(e) => setFormData({ ...formData, timePreference: e.target.value })}
                    className="sr-only"
                  />
                  <span className="text-sm font-medium">{time}</span>
                </label>
              ))}
            </div>
          </div>

          {/* ุงูููุงุญุธุงุช */}
          <div className="space-y-2">
            <label htmlFor="notes" className="block text-sm font-medium text-gray-700">
              ููุงุญุธุงุช ุฅุถุงููุฉ
            </label>
            <textarea
              id="notes"
              className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 text-base min-h-[100px] text-gray-900"
              placeholder="ุฃู ููุงุญุธุงุช ุฃู ุงุณุชูุณุงุฑุงุช ุฅุถุงููุฉ"
              rows={4}
              value={formData.notes}
              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
            />
          </div>

          {/* ุฃุฒุฑุงุฑ ุงูุชุญูู */}
          <div className="flex flex-col sm:flex-row gap-3 pt-4">
            <button
              type="submit"
              disabled={isSubmitting}
              className="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 text-white px-6 py-3 rounded-xl font-medium hover:from-blue-700 hover:to-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition duration-200 text-base justify-center items-center"
            >
              {isSubmitting ? (
                <>
                  <span className="ml-2">ุฌุงุฑู ุงูุชุณุฌูู...</span>
                  <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent" />
                </>
              ) : (
                "ุชุณุฌูู"
              )}
            </button>
            <button
              type="button"
              onClick={handleReset}
              className="flex-1 bg-gray-100 text-gray-700 px-6 py-3 rounded-xl font-medium hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 transition duration-200 text-base"
            >
              ุฅุนุงุฏุฉ ุชุนููู
            </button>
          </div>
        </form>
      </div>
    </div>
  );
} 